
import { useEffect, useState } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { useLocation, useNavigate } from "react-router-dom";
import { supabase } from "../utils/supabaseClient";
import { meals } from "../data/meals";
import Layout from "../components/Layout";
import {
  PaymentElement,
  useStripe,
  useElements,
  Elements,
} from "@stripe/react-stripe-js";
import { loadStripe } from "@stripe/stripe-js";

// Initialize Stripe
const stripePromise = loadStripe(
  import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY ||
    "pk_test_51QYuE7Kt5CDCQ1bVnpEcZAYjIoODnDDNyxAzQ9PkJpwrHHoKjFBefaA2aCdwVX2w51tpYdWOxWuEHYkf3KuNOVs800Q3qD4Y9E",
);

// Validation schema
const checkoutSchema = z.object({
  specialInstructions: z.string().optional(),
  email: z.string().email("Please enter a valid email address"),
});

type CheckoutFormData = z.infer<typeof checkoutSchema>;

function PaymentForm({ 
  pricing, 
  selectedPlan, 
  mealPlan, 
  user, 
  selectedMeals, 
  userProfile,
  navigate 
}: {
  pricing: any;
  selectedPlan: any;
  mealPlan: any;
  user: any;
  selectedMeals: any[];
  userProfile: any;
  navigate: any;
}) {
  const stripe = useStripe();
  const elements = useElements();
  const [isProcessingPayment, setIsProcessingPayment] = useState(false);
  const [message, setMessage] = useState<string | null>(null);

  const {
    register,
    handleSubmit,
    formState: { errors },
    setValue,
  } = useForm<CheckoutFormData>({
    resolver: zodResolver(checkoutSchema),
  });

  useEffect(() => {
    if (userProfile?.email) {
      setValue("email", userProfile.email);
    }
  }, [userProfile, setValue]);

  const onSubmit = async (data: CheckoutFormData) => {
    if (!stripe || !elements) {
      return;
    }

    setIsProcessingPayment(true);
    setMessage(null);

    const { error } = await stripe.confirmPayment({
      elements,
      confirmParams: {
        return_url: `${window.location.origin}/payment-success`,
        receipt_email: data.email,
      },
    });

    if (error) {
      if (error.type === "card_error" || error.type === "validation_error") {
        setMessage(error.message || "Payment failed");
      } else {
        setMessage("An unexpected error occurred.");
      }
    }

    setIsProcessingPayment(false);
  };

  const paymentElementOptions = {
    layout: "accordion" as const,
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
      {/* Email Address */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Email Address *
        </label>
        <input
          {...register("email")}
          type="email"
          placeholder="your@email.com"
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
        />
        {errors.email && (
          <p className="text-red-500 text-sm mt-1">
            {errors.email.message}
          </p>
        )}
      </div>

      {/* Special Instructions */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-2">
          Special Instructions (Optional)
        </label>
        <textarea
          {...register("specialInstructions")}
          rows={3}
          placeholder="e.g., Leave at door, allergic to nuts, extra spicy..."
          className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
        />
      </div>

      {/* Payment Element */}
      <div>
        <PaymentElement id="payment-element" options={paymentElementOptions} />
      </div>

      {/* Security Badge */}
      <div className="bg-blue-50 p-4 rounded-lg">
        <div className="flex items-center space-x-2">
          <svg
            className="w-5 h-5 text-blue-600"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fillRule="evenodd"
              d="M2.166 4.999A11.954 11.954 0 0010 1.944 11.954 11.954 0 0017.834 5c.11.65.166 1.32.166 2.001 0 5.225-3.34 9.67-8 11.317C5.34 16.67 2 12.225 2 7c0-.682.057-1.35.166-2.001zm11.541 3.708a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
              clipRule="evenodd"
            />
          </svg>
          <span className="text-sm font-medium text-blue-600">
            Secure Payment with Stripe
          </span>
        </div>
        <p className="text-xs text-blue-600 mt-1">
          Your payment information is encrypted and secure.
        </p>
      </div>

      {/* Error Message */}
      {message && (
        <div className="bg-red-50 border border-red-200 rounded-lg p-4">
          <p className="text-red-600 text-sm">{message}</p>
        </div>
      )}

      {/* Submit Button */}
      <button
        type="submit"
        disabled={isProcessingPayment || !stripe || !elements}
        className="w-full bg-gradient-to-r from-orange-500 to-red-500 text-white py-4 px-6 rounded-xl font-bold text-lg hover:from-orange-600 hover:to-red-600 transition-all duration-300 transform hover:scale-105 shadow-lg disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {isProcessingPayment ? (
          <div className="flex items-center justify-center">
            <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
            Processing...
          </div>
        ) : (
          `Pay Securely - $${pricing.total.toFixed(2)}`
        )}
      </button>
    </form>
  );
}

export default function Checkout() {
  const location = useLocation();
  const navigate = useNavigate();
  const selectedPlan = location.state?.selectedPlan;
  const [user, setUser] = useState<any>(null);
  const [userProfile, setUserProfile] = useState<any>(null);
  const [selectedMeals, setSelectedMeals] = useState<any[]>([]);
  const [mealPlan, setMealPlan] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [clientSecret, setClientSecret] = useState<string>("");

  useEffect(() => {
    const fetchData = async () => {
      const {
        data: { user: authUser },
      } = await supabase.auth.getUser();
      if (!authUser) {
        navigate("/auth");
        return;
      }

      // Fetch user details
      const { data: userDetails } = await supabase
        .from("user_details")
        .select("*")
        .eq("user_id", authUser.id)
        .single();
      setUser(userDetails);

      // Fetch user profile
      const { data: profile } = await supabase
        .from("profiles")
        .select("*")
        .eq("id", authUser.id)
        .single();
      setUserProfile(profile);

      // Fetch weekly meal plan
      const { data: weeklyMeals } = await supabase
        .from("weekly_meal_plan")
        .select("*")
        .eq("user_id", authUser.id);

      if (weeklyMeals && weeklyMeals.length > 0) {
        const mealsWithDetails = weeklyMeals.map((wm) => {
          const meal = meals.find((m) => m.id === wm.meal_id);
          return { ...meal, ...wm };
        });
        setSelectedMeals(mealsWithDetails);
      }

      // Fetch meal plan
      const { data: plan } = await supabase
        .from("meal_plans")
        .select("*")
        .eq("user_id", authUser.id)
        .single();
      setMealPlan(plan);

      // Create payment intent
      const pricing = calculatePricing(selectedPlan, plan);
      const planToUse = selectedPlan || plan || { name: "Custom Plan", id: "custom" };

      try {
        const response = await fetch("/api/create-payment-intent", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            planName: planToUse?.name || "Custom Plan",
            amount: Math.round(pricing.total * 100), // Convert to cents
            planId: planToUse?.id,
            customerEmail: profile?.email,
            userId: authUser.id,
            mealCount: weeklyMeals?.length || 0,
          }),
        });

        if (response.ok) {
          const { clientSecret } = await response.json();
          setClientSecret(clientSecret);
        }
      } catch (error) {
        console.error("Error creating payment intent:", error);
      }

      setIsLoading(false);
    };
    fetchData();
  }, [navigate, selectedPlan]);

  const calculateNutrition = () => {
    const totalKJ = selectedMeals.reduce(
      (sum, meal) => sum + (meal?.kj || 0),
      0,
    );
    const totalProtein = selectedMeals.reduce(
      (sum, meal) => sum + (meal?.protein || 0),
      0,
    );
    const averageDailyKJ = Math.round(totalKJ / 7);
    const weeklyProtein = Math.round(totalProtein);

    return { averageDailyKJ, weeklyProtein, totalKJ };
  };

  const calculatePricing = (selectedPlan?: any, mealPlan?: any) => {
    let basePrice, subtotal, total;

    if (selectedPlan) {
      basePrice =
        selectedPlan.price ||
        selectedPlan.weeklyPrice ||
        selectedPlan.monthlyPrice ||
        0;
      subtotal = basePrice;
      const discount = basePrice * 0.15; // 15% discount
      total = subtotal - discount;
      return { basePrice, discount, subtotal, total };
    } else if (mealPlan) {
      basePrice = mealPlan.price_per_week * mealPlan.duration || 0;
      const discount = basePrice * 0.15; // 15% discount
      subtotal = basePrice;
      total = subtotal - discount;
      return { basePrice, discount, subtotal, total };
    } else {
      // Default pricing if no plan selected
      basePrice = 50; // Default weekly price
      const discount = basePrice * 0.15;
      subtotal = basePrice;
      total = subtotal - discount;
      return { basePrice, discount, subtotal, total };
    }
  };

  if (isLoading) {
    return (
      <Layout>
        <div className="min-h-screen flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading your order...</p>
          </div>
        </div>
      </Layout>
    );
  }

  const nutrition = calculateNutrition();
  const pricing = calculatePricing(selectedPlan, mealPlan);
  const startDate = new Date();
  startDate.setDate(startDate.getDate() + 1); // Start tomorrow

  const appearance = {
    theme: 'stripe' as const,
    variables: {
      colorPrimary: '#f97316',
    },
  };

  return (
    <Layout>
      <div className="min-h-screen bg-gradient-to-br from-orange-50 to-red-50">
        <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <h1 className="text-4xl font-bold text-gray-900 mb-8 text-center">
            Complete Your Order
          </h1>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
            {/* Left Column - Order Details */}
            <div className="space-y-6">
              {/* Delivery Address */}
              <div className="bg-white rounded-2xl p-6 shadow-lg">
                <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                  <svg
                    className="w-5 h-5 mr-2 text-orange-500"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z"
                      clipRule="evenodd"
                    />
                  </svg>
                  Delivery Address
                </h2>
                <div className="space-y-2 text-gray-600">
                  <p className="font-semibold">{userProfile?.full_name}</p>
                  <p>{userProfile?.address}</p>
                  <p>{userProfile?.phone}</p>
                </div>
              </div>

              {/* Meal Summary */}
              <div className="bg-white rounded-2xl p-6 shadow-lg">
                <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                  <svg
                    className="w-5 h-5 mr-2 text-orange-500"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path d="M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z" />
                  </svg>
                  Your Weekly Meals ({selectedMeals.length} meals)
                </h2>
                {selectedMeals.length > 0 ? (
                  <div className="grid grid-cols-1 gap-3 max-h-96 overflow-y-auto">
                    {selectedMeals.slice(0, 6).map((meal, index) => (
                      <div
                        key={index}
                        className="flex items-center space-x-3 p-3 bg-gray-50 rounded-lg"
                      >
                        <img
                          src={meal?.image || "/placeholder-meal.jpg"}
                          alt={meal?.name}
                          className="w-12 h-12 rounded-lg object-cover"
                        />
                        <div className="flex-1">
                          <p className="font-medium text-sm text-gray-900">
                            {meal?.name}
                          </p>
                          <p className="text-xs text-gray-500">
                            {meal?.kj} kJ • {meal?.protein}g protein
                          </p>
                        </div>
                      </div>
                    ))}
                    {selectedMeals.length > 6 && (
                      <p className="text-sm text-gray-500 text-center py-2">
                        +{selectedMeals.length - 6} more meals...
                      </p>
                    )}
                  </div>
                ) : (
                  <div className="text-center py-8 text-gray-500">
                    <p>No meals selected yet.</p>
                    <button
                      onClick={() => navigate("/finalize-meals")}
                      className="mt-2 text-orange-500 hover:text-orange-600 font-medium"
                    >
                      Select your meals →
                    </button>
                  </div>
                )}
              </div>

              {/* Nutrition Summary */}
              <div className="bg-white rounded-2xl p-6 shadow-lg">
                <h2 className="text-xl font-bold text-gray-900 mb-4">
                  Nutrition Overview
                </h2>
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center p-4 bg-orange-50 rounded-lg">
                    <p className="text-2xl font-bold text-orange-600">
                      {nutrition.averageDailyKJ}
                    </p>
                    <p className="text-sm text-gray-600">Daily kJ Average</p>
                  </div>
                  <div className="text-center p-4 bg-red-50 rounded-lg">
                    <p className="text-2xl font-bold text-red-600">
                      {nutrition.weeklyProtein}g
                    </p>
                    <p className="text-sm text-gray-600">Weekly Protein</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Right Column - Payment & Order Summary */}
            <div className="space-y-6">
              {/* Order Summary */}
              <div className="bg-white rounded-2xl p-6 shadow-lg">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">
                  Order Summary
                </h3>
                <div className="space-y-2">
                  <div className="flex justify-between">
                    <span className="text-gray-600">
                      {selectedPlan?.name || mealPlan?.name || "Custom Plan"} (
                      {selectedPlan?.duration || mealPlan?.duration || "1 week"}
                      )
                    </span>
                    <span>${pricing.subtotal.toFixed(2)}</span>
                  </div>
                  <div className="flex justify-between text-green-600">
                    <span>Early Bird Discount (15%)</span>
                    <span>-${pricing.discount.toFixed(2)}</span>
                  </div>
                  <div className="border-t pt-2 flex justify-between text-lg font-bold">
                    <span>Total</span>
                    <span>${pricing.total.toFixed(2)}</span>
                  </div>
                  <p className="text-xs text-gray-500 mt-2">
                    Starting{" "}
                    {startDate.toLocaleDateString("en-AU", {
                      weekday: "long",
                      year: "numeric",
                      month: "long",
                      day: "numeric",
                    })}
                  </p>
                </div>
              </div>

              {/* Payment Section */}
              <div className="bg-white rounded-2xl p-6 shadow-lg">
                <h2 className="text-xl font-bold text-gray-900 mb-4 flex items-center">
                  <svg
                    className="w-5 h-5 mr-2 text-orange-500"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M4 4a2 2 0 00-2 2v4a2 2 0 002 2V6h10a2 2 0 00-2-2H4zm2 6V8a2 2 0 012-2h8a2 2 0 012 2v8a2 2 0 01-2 2H8a2 2 0 01-2-2v-2zM6 12a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H8a2 2 0 01-2-2v-2z"
                      clipRule="evenodd"
                    />
                  </svg>
                  Secure Payment
                </h2>
                {clientSecret && (
                  <Elements 
                    stripe={stripePromise} 
                    options={{ 
                      clientSecret, 
                      appearance 
                    }}
                  >
                    <PaymentForm 
                      pricing={pricing}
                      selectedPlan={selectedPlan}
                      mealPlan={mealPlan}
                      user={user}
                      selectedMeals={selectedMeals}
                      userProfile={userProfile}
                      navigate={navigate}
                    />
                  </Elements>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </Layout>
  );
}
